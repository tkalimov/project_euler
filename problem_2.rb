# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
require 'byebug'

# problem_number = ARGV[0]

# byebug
# puts "test"

# SLOW BRUTE FORCE APPROACH 
beginning_time = Time.now

fibo_array = [1,2,3]
sum = 2 
while fibo_array.last < 4000000 do 
	new_term = fibo_array[-1] + fibo_array[-2]
	fibo_array.push(new_term)
	sum += new_term if new_term.even?	
end 
end_time = Time.now
puts sum 
puts "First pass - Time elapsed #{(end_time - beginning_time)*1000} milliseconds"


# More nuanced BRUTE FORCE APPROACH 
beginning_time = Time.now

fibo_array = [1,2]
sum = 2 
while fibo_array.last < 4000000 do 
	new_term = fibo_array[0] + fibo_array[1]
	sum += new_term if new_term.even?	
	fibo_array[0] = fibo_array[1]
	fibo_array[1] = new_term
end 
end_time = Time.now
puts sum 
puts "Second pass - Time elapsed #{(end_time - beginning_time)*1000} milliseconds"
